#클래스

JavaScript는 프로토타입 기반 객체지향 언어이다.

프로토타입 기반 프로그래밍은 클래스가 필요없는 객체 지향 스타일

프로토타입과 체인과 클로저 등을 이용하여 상속, 캡슐화 등을 구현

## 클래스의 정의

클래스는 '특별한 **함수**'이다.

class 선언 또는 class 표현식을 이용하요 정의한다.

함수 선언과는 다르게 **클래스 선언에서는 호이스팅(var 같은)이 일어나지 않는다.**

### Class 선언

class 키워드를 사용하여 선언

ex) 

// 클래스 선언문
class Person {
  // constructor(생성자)
  constructor(name) {
    this._name = name;
  }

}

### Class 표현식

Class 표현식은 이름을 가질수도, 갖지 않을수도 있다.

Class 표현식의 이름은 클래스 body의 local scope안에서 유효하다.

ex)

// unnamed
let Rectangle = class {
  constructor(height, width) {
     this.height = height;
     this.width = width;
   }
};
console.log([Rectangle.name](http://rectangle.name/));
// 출력: "Rectangle"

// named
let Rectangle = class Rectangle2 {
   constructor(height, width) {
       this.height = height;
       this.width = width;
    }
};
console.log([Rectangle.name](http://rectangle.name/));
// 출력: "Rectangle2"

### 클래스 문법 구조의 역할

class User {
  constructor(name) { this.name = name; }
  sayHi() { alert(this.name); }
}

let ray = new User('ray');

// User가 함수라는 증거

console.log(typeof User); // function

1. User 라는 이름을 가진 함수 생성, 함수 본문은 생성자 (constructor)에서 가져옴 
2. sayHi()같이 클래스 내에서 선언된 메서드를 User.prototype에 저장
3. new User를 호출하여 객체를 생성하며, 객체의 메서드르 호출하면, prototype 프로퍼티에서 가져옴. (여기서 User는 클래스 이름이 아니라, 생성자의 이름)

### 호이스팅

class의 호이스팅은 let,const 호이스팅처럼 이루어짐

즉, 선언과 초기화가 따로 이루어지며, 선언문에 오기 전에 함수를 호출하면

TDZ로 인하여 ReferenceError가 발생

ex)

const ray = new Student('OH')  // ReferenceError 

class Student {}

## 인스턴스 생성

- 생성자 함수와 같이 new연산자를 이용하여 클래스 인스턴스를 생성

    ex) 

    class Foo {}

    const foo = new Foo();

- new연산자와 함께 호출한 이름은 클래스의 이름이 아니라 생성자의 이름.
- 선언식으로 정의한 클래스의 이름은 생성자와 동일

    ex) console.log(Object.getPrototypeOf(foo).constructor === Foo); // true

- new 연산자를 사용하지 않으면 TypeError 발생

    ex ) const foo = Foo(); // TypeError: Class constructor Foo cannot be invoked without 'new'

## Class Body와 메서드

Class body는 {}로 묶여있는 안쪽 구간.

이 안에 메서드나 생성자같은 클래스 멤버를 정의

### Contructor(생성자)

- 인스턴스를 생성하고, 클래스 필드를 초기화 하기 위한 특수한 메소드
- 클래스 안에 한개만 존재
- 부모 클래스의 contructor를 호출하기위해 super 키워드 사용 가능
- 생략하면 Contructor() {} 를 포함한 것과 동일하게 동작

ex) 

// 클래스 선언문
class Person {
  // constructor(생성자). 이름을 바꿀 수 없다.
  constructor(name) {
    // this는 클래스가 생성할 인스턴스를 가리킨다.
    // _name은 클래스 필드이다.
    this._name = name;
  }
}

// 인스턴스 생성
const me = new Person('Lee');
console.log(me); // Person {_name: "Lee"}

### Class 필드

- 클래스 내부의 캡슐화된 변수를 말하며, 데이터 멤버 또는 멤버 변수라고도 함
- class 필드는 인스턴스 프로퍼티 또는 정적 프로퍼티가 될 수 있다.
- Contructor내부에서 선언한 클래스 필드는 생성할 인스턴스를 카리키는 this에 바인딩
- 즉, 인스턴스의 프로퍼티가 되어 클래스 외부에서 참조가능(public)

**+ 필드 선언** 

: 자바스크립트 표준화 위원회에 실험적 기능 (stage 3) TC39 로 제안

  이를 지원하는 브라우져는 제한적인 상태

ex) 

class Foo {
  x = 1;            // Field declaration
  #p = 0;           // Private field
  static y = 20;    // Static public field
  static #sp = 30;  // Static private field
  // 2019/5 : Chrome 미구현
  // static #sm() {    // Static private method
  //   console.log('static private method');
  // }

  bar() {
    this.#p = 10; // private 필드 참조
    // this.p = 10; // 새로운 public p 필드를 동적 추가한다.
    return this.#p;
  }
}

const foo = new Foo();
console.log(foo); // Foo&nbsp;{#p: 10, x: 1}

console.log(foo.x); // 1
// console.log(foo.#p); // SyntaxError: Undefined private field #p: must be declared in an enclosing class
console.log(Foo.y); // 20
// console.log(Foo.#sp); // SyntaxError: Undefined private field #sp: must be declared in an enclosing class
console.log(foo.bar()); // 10

## getter / setter

getter / setter 는 클래스에 새로 도입된 기능이 아니라, **접근자 프로퍼티**이다.

### getter

- 클래스 필드에 접근하여 값을 가져올 때 사용
- 메소드 이름 앞에 get 키워드를 사용하여 정의
- 프로퍼티처럼 참조하는 형식으로 사용하며, 참조를 통한 메소드 호출
- 값을 반드시 반환해야 함

### setter

- 클래스 필드의 값을 조작하여 값을 할당할 때 사용
- 메소드 이름 앞에 set 키워드를 사용하여 정의
- 프로퍼티처럼 값을 할당하는 형식으로 사용하며, 할당 시에 메소드 호출

ex)

class Foo {
  constructor(arr = []) {
    this._arr = arr;
  }

  // getter: get 키워드 뒤에 오는 메소드 이름 firstElem은 클래스 필드 이름처럼 사용된다.
  get firstElem() {
    // getter는 반드시 무언가를 반환하여야 한다.
    return this._arr.length ? this._arr[0] : null;
  }

  // setter: set 키워드 뒤에 오는 메소드 이름 firstElem은 클래스 필드 이름처럼 사용된다.
  set firstElem(elem) {
    // ...this._arr은 this._arr를 개별 요소로 분리한다
    this._arr = [elem, ...this._arr];
  }
}

const foo = new Foo([1, 2]);

// 클래스 필드 lastElem에 값을 할당하면 setter가 호출된다.
foo.firstElem = 100;

console.log(foo.firstElem); // 100

## 정적 메소드

- static 키워드를 사용하여 정의
- 정적 메소드는 클래스의 인스턴스가 아니라, 클래스 이름으로 호출
- 즉, 인스턴스 생성없이도 호출 가능

    ex)

    class Foo {
      constructor(prop) {
        this.prop = prop;
      }

      static staticMethod() {
        /*
        정적 메소드는 this를 사용할 수 없다.
        정적 메소드 내부에서 this는 클래스의 인스턴스가 아닌 클래스 자신을 가리킨다.
        */
        return 'staticMethod';
      }

      prototypeMethod() {
        return this.prop;
      }
    }

    // 정적 메소드는 클래스 이름으로 호출한다.
    console.log(Foo.staticMethod());

    const foo = new Foo(123);
    // 정적 메소드는 인스턴스로 호출할 수 없다.
    console.log(foo.staticMethod()); // Uncaught TypeError: foo.staticMethod is not a function

    ⇒ 정적 메소드인 staticMethod는 생성자 함수 Foo의 메소드(함수는 객체이므로 메소드를 가질 수 있다.)

    일반 메소드인 prototypeMethod는 프로토타입 객체 Foo.prototype의 메소드이다. 

    따라서 staticMethod는 foo에서 호출할 수 없다.
